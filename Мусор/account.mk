Техническое задание: Личные кабинеты арендодателя и арендатора
Контекст проекта
Платформа аренды строительной техники с посреднической моделью:

Арендодатель → Платформа (наценка) → Арендатор (скидка)

Реализовано: регистрация, авторизация, каталог, корзина, заказы

Технологии: Laravel 10, PHP 8.1, MySQL, Sanctum + Spatie Permissions

Цели
Реализовать раздельные личные кабинеты:

Кабинет арендодателя: управление техникой, заказами, выплатами.

Кабинет арендатора: управление заказами, скидками, арендой.

Интеграция с сервисом ценообразования (PricingService) и финансовой моделью.

Этапы реализации
1. Подготовка ролей и маршрутов
Задача: Настроить ролевую модель для lessor (арендодатель) и lessee (арендатор).

Действия:

Использовать Spatie Permissions для разделения доступа.

Создать маршруты:

php
// Для арендодателя
Route::prefix('lessor')->middleware(['auth:sanctum', 'role:lessor'])->group(function() {
    Route::get('/dashboard', [LessorController::class, 'dashboard']);
    // ... другие эндпоинты
});

// Для арендатора
Route::prefix('lessee')->middleware(['auth:sanctum', 'role:lessee'])->group(function() {
    Route::get('/dashboard', [LesseeController::class, 'dashboard']);
    // ... другие эндпоинты
});
2. Кабинет арендодателя
Основные блоки:

Дашборд: статистика по заказам, выплатам, технике.

Управление техникой: добавление/редактирование единиц техники.

Заказы: просмотр, подтверждение, отмена.

Финансы: история выплат, ожидаемые платежи.

Ключевые компоненты:

Страница	Функционал	Интеграция с бэкендом
LessorDashboard	Графики: заказы/выплаты за период	GET /api/lessor/stats
EquipmentList	CRUD для техники, фильтр по статусу (активна/в аренде)	GET/PUT /api/equipment
OrderManagement	Таблица заказов с действиями (подтвердить/отменить). Поля: base_amount, platform_fee, lessor_payout	GET /api/lessor/orders
PayoutHistory	История выплат с фильтром по дате. Детали: сумма, статус, номер заказа.	GET /api/lessor/payouts
3. Кабинет арендатора
Основные блоки:

Дашборд: активные заказы, история аренды.

Управление заказами: оформление, отмена, продление.

Скидки: отображение текущей скидки, история применения.

Профиль: реквизиты для договоров.

Ключевые компоненты:

Страница	Функционал	Интеграция с бэкендом
LesseeDashboard	Список активных заказов, кнопки действий (отменить/продлить)	GET /api/lessee/orders?status=active
OrderHistory	Архив заказов с детализацией (техника, сроки, цены)	GET /api/lessee/orders?status=completed
DiscountInfo	Текущий уровень скидки, пример расчета через PricingService	GET /api/lessee/discount
Profile	Редактирование юр. данных (для применения в УПД)	PUT /api/user/profile
4. Финансовые блоки (общие)
Отображение цен:
Для каждого заказа выводить:

json
{
  "base_amount": "10 000 ₽ (арендодателю)",
  "platform_fee": "2 000 ₽ (наценка)",
  "discount_amount": "500 ₽ (ваша скидка)",
  "total": "11 500 ₽"
}
Интеграция с PricingService:
При оформлении заказа в кабинете арендатора вызвать:

php
$pricing = PricingService::calculatePrice($equipment, $user->company, $days);
5. Безопасность
Проверки:

Арендодатель видит только свою технику/заказы.

Арендатор видит только свои заказы.

Запрет прямого доступа к чужим данным через API (проверка policy в Laravel).

Что предоставить фронтенд-разработчику для работы с нейросетью
Чтобы избежать ошибок и уточнить детали, отправьте:

Спецификации API:

Файлы роутов: routes/api.php

JSON-примеры ответов для ключевых эндпоинтов (напр., GET /api/lessor/orders).

Модели данных:

Файлы моделей: Order.php, OrderItem.php, Platform.php

Миграции для финансовых полей (особенно orders и order_items).

Сервисы:

Код PricingService.php (логика расчета цен).

Пример использования сервиса в контроллере.

Тестовые данные:

SQL-дамп с примерами заказов для разных ролей.

Примеры Platform данных (реквизиты).

Политики доступа:

Файлы Policy для Order и Equipment (например, OrderPolicy.php).

Пример запроса к нейросети с контекстом:
markdown
**Запрос**:
"Нужно создать компонент `OrderCard.vue` для кабинета арендодателя.
Данные заказа:
- `id`, `status`, `equipment_name`,
- `base_amount`, `platform_fee`, `lessor_payout`
Действия: кнопки 'Подтвердить', 'Отклонить'.

**Приложенные файлы**:
1. [order_policy.php] – политика доступа
2. [OrderController.php] – метод `confirmOrder`
3. [order.json] – пример данных API
Критерии приемки
Ролевой доступ: арендодатель/арендатор видят только свои данные.

Финансовые расчеты: корректное отображение base_amount, platform_fee, discount_amount.

Интеграция с PricingService: цены в заказе совпадают с расчетами бэкенда.

Реактивность: обновление статусов заказов без перезагрузки страницы.

Техническая поддержка: @backend-team (Slack)
