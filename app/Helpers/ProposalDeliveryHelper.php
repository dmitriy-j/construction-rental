<?php

namespace App\Helpers;

use App\Models\RentalRequest;
use App\Models\Company;
use App\Models\Location;
use App\Models\Equipment;
use App\Services\DeliveryCalculatorService;
use App\Services\TransportCalculatorService;
use Illuminate\Support\Facades\Log;

class ProposalDeliveryHelper
{
    public static function validateDeliveryFeasibility(RentalRequest $request, Company $lessorCompany): array
    {
        Log::info("üîç Validating delivery feasibility", [
            'request_id' => $request->id,
            'lessor_company_id' => $lessorCompany->id,
            'customer_location_id' => $request->location_id
        ]);

        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç)
        $customerLocation = Location::find($request->location_id);

        if (!$customerLocation) {
            Log::warning("‚ùå Customer location not found", ['location_id' => $request->location_id]);
            return [
                'feasible' => false,
                'error' => '–õ–æ–∫–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            ];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–æ–º–ø–∞–Ω–∏–∏ –µ—Å—Ç—å –ª–æ–∫–∞—Ü–∏–∏
        $hasLocations = Location::where('company_id', $lessorCompany->id)->exists();
        if (!$hasLocations) {
            Log::warning("‚ùå Lessor has no locations", ['company_id' => $lessorCompany->id]);
            return [
                'feasible' => false,
                'error' => '–£ –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–æ–∫–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏'
            ];
        }

        Log::info("‚úÖ Delivery validation passed", [
            'customer_location' => $customerLocation->name
        ]);

        return [
            'feasible' => true,
            'error' => null,
            'to_location' => $customerLocation
        ];
    }

    public static function calculateDelivery(RentalRequest $request, Company $lessorCompany, array $equipmentItems): array
    {
        Log::info("üöö Starting delivery calculation", [
            'rental_request_id' => $request->id,
            'lessor_company_id' => $lessorCompany->id,
            'equipment_count' => count($equipmentItems),
            'total_units' => array_sum(array_column($equipmentItems, 'quantity')),
            'delivery_required' => $request->delivery_required
        ]);

        if (!$request->delivery_required) {
            Log::info("‚ÑπÔ∏è Delivery not required for this request");
            return [
                'delivery_required' => false,
                'delivery_cost' => 0,
                'distance_km' => 0,
                'vehicle_type' => null,
                'rate_per_km' => 0,
                'from_location' => null,
                'to_location' => null,
                'delivery_breakdown' => [],
                'error' => null
            ];
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç)
            $customerLocation = Location::find($request->location_id);
            if (!$customerLocation) {
                throw new \Exception('–õ–æ–∫–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // üî• –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
            $deliveryLocation = self::determineDeliveryLocation($equipmentItems, $lessorCompany);

            if (!$deliveryLocation) {
                throw new \Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
            }

            Log::info("üìç Delivery locations identified", [
                'from' => $deliveryLocation->name . ' (' . $deliveryLocation->address . ')',
                'to' => $customerLocation->name . ' (' . $customerLocation->address . ')',
                'equipment_count' => count($equipmentItems)
            ]);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            $deliveryCalculator = app(DeliveryCalculatorService::class);
            $transportCalculator = app(TransportCalculatorService::class);

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            $distanceKm = $deliveryCalculator->calculateDistance($deliveryLocation, $customerLocation);

            Log::info("üìè Distance calculated", ['distance_km' => $distanceKm]);

            if ($distanceKm <= 0) {
                throw new \Exception('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏');
            }

            // üî• –û–°–ù–û–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –ö–ê–ñ–î–û–ô –µ–¥–∏–Ω–∏—Ü—ã —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            $totalDeliveryCost = 0;
            $vehicleTypes = [];
            $deliveryBreakdown = [];

            foreach ($equipmentItems as $equipmentItem) {
                $equipment = Equipment::find($equipmentItem['equipment_id']);
                if (!$equipment) {
                    Log::warning("‚ùå Equipment not found", ['equipment_id' => $equipmentItem['equipment_id']]);
                    continue;
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                $vehicleType = $transportCalculator->calculateRequiredTransport($equipment);
                $ratePerKm = $transportCalculator->getTransportRate($vehicleType);

                // üî• –†–ê–°–ß–ï–¢ –î–õ–Ø –ö–ê–ñ–î–û–ô –ï–î–ò–ù–ò–¶–´: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ √ó —Å—Ç–∞–≤–∫–∞ √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                $deliveryCostPerUnit = $distanceKm * $ratePerKm;
                $deliveryCostForEquipment = $deliveryCostPerUnit * $equipmentItem['quantity'];

                $totalDeliveryCost += $deliveryCostForEquipment;
                $vehicleTypes[] = $vehicleType;

                $deliveryBreakdown[] = [
                    'equipment_id' => $equipment->id,
                    'equipment_title' => $equipment->title,
                    'quantity' => $equipmentItem['quantity'],
                    'vehicle_type' => $vehicleType,
                    'rate_per_km' => $ratePerKm,
                    'delivery_cost_per_unit' => $deliveryCostPerUnit,
                    'delivery_cost_total' => $deliveryCostForEquipment,
                    'calculation' => "{$distanceKm} –∫–º √ó {$ratePerKm} ‚ÇΩ/–∫–º √ó {$equipmentItem['quantity']} –µ–¥."
                ];

                Log::info("üì¶ Equipment delivery calculated", [
                    'equipment_id' => $equipment->id,
                    'equipment_title' => $equipment->title,
                    'quantity' => $equipmentItem['quantity'],
                    'vehicle_type' => $vehicleType,
                    'delivery_cost_per_unit' => $deliveryCostPerUnit,
                    'delivery_cost_total' => $deliveryCostForEquipment
                ]);
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å–∞–º—ã–π —á–∞—Å—Ç—ã–π)
            $vehicleTypeCounts = array_count_values($vehicleTypes);
            arsort($vehicleTypeCounts);
            $primaryVehicleType = key($vehicleTypeCounts) ?? 'truck_25t';
            $primaryRatePerKm = $transportCalculator->getTransportRate($primaryVehicleType);

            Log::info("‚úÖ Delivery calculation completed", [
                'total_delivery_cost' => $totalDeliveryCost,
                'distance_km' => $distanceKm,
                'vehicle_types' => array_count_values($vehicleTypes),
                'delivery_breakdown_count' => count($deliveryBreakdown)
            ]);

            return [
                'delivery_required' => true,
                'delivery_cost' => $totalDeliveryCost,
                'distance_km' => round($distanceKm, 2),
                'vehicle_type' => $primaryVehicleType,
                'rate_per_km' => $primaryRatePerKm,
                'from_location' => [
                    'id' => $deliveryLocation->id,
                    'name' => $deliveryLocation->name,
                    'address' => $deliveryLocation->address,
                    'formatted_name' => self::formatLocationName($deliveryLocation)
                ],
                'to_location' => [
                    'id' => $customerLocation->id,
                    'name' => $customerLocation->name,
                    'address' => $customerLocation->address,
                    'formatted_name' => self::formatLocationName($customerLocation)
                ],
                'delivery_breakdown' => $deliveryBreakdown,
                'total_units' => array_sum(array_column($equipmentItems, 'quantity')),
                'calculation_notes' => '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ',
                'error' => null
            ];

        } catch (\Exception $e) {
            Log::error("‚ùå Delivery calculation failed: " . $e->getMessage(), [
                'request_id' => $request->id,
                'lessor_company_id' => $lessorCompany->id
            ]);

            return [
                'delivery_required' => false,
                'delivery_cost' => 0,
                'distance_km' => 0,
                'vehicle_type' => null,
                'rate_per_km' => 0,
                'from_location' => null,
                'to_location' => null,
                'delivery_breakdown' => [],
                'error' => $e->getMessage()
            ];
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
     */
    private static function determineDeliveryLocation(array $equipmentItems, Company $lessorCompany): ?Location
    {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        foreach ($equipmentItems as $item) {
            $equipment = Equipment::with('location')->find($item['equipment_id']);

            if ($equipment && $equipment->location) {
                Log::info("üìç Using equipment location", [
                    'equipment_id' => $equipment->id,
                    'equipment_title' => $equipment->title,
                    'location_id' => $equipment->location->id,
                    'location_name' => $equipment->location->name
                ]);
                return $equipment->location;
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        $fallbackLocation = Location::where('company_id', $lessorCompany->id)->first();

        if ($fallbackLocation) {
            Log::warning("‚ö†Ô∏è Using fallback company location", [
                'location_id' => $fallbackLocation->id,
                'location_name' => $fallbackLocation->name
            ]);
        }

        return $fallbackLocation;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private static function formatLocationName(Location $location): string
    {
        // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å
        $uninformativeNames = ['—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞', '–±–∞–∑–∞', '—Å–∫–ª–∞–¥', '–ø–ª–æ—â–∞–¥–∫–∞'];

        if (in_array(mb_strtolower($location->name), $uninformativeNames) && !empty($location->address)) {
            return $location->address;
        }

        return $location->name;
    }

    /**
     * üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
     */
    public static function getDeliveryCostForEquipment(array $deliveryCalculation, int $equipmentId): float
    {
        if (empty($deliveryCalculation['delivery_breakdown'])) {
            return 0;
        }

        foreach ($deliveryCalculation['delivery_breakdown'] as $breakdown) {
            if ($breakdown['equipment_id'] == $equipmentId) {
                return $breakdown['delivery_cost_total'];
            }
        }

        return 0;
    }
}
