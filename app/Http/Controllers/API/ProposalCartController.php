<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Services\CartService;
use App\Http\Controllers\CheckoutController;
use App\Services\EquipmentAvailabilityService;
use App\Models\RentalRequestResponse;
use App\Models\Cart;
use App\Models\CartItem;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;
use Carbon\Carbon;
use Exception;

class ProposalCartController extends Controller
{
    protected $cartService;
    protected $checkoutController;

    public function __construct(
        CartService $cartService,
        CheckoutController $checkoutController
    ) {
        $this->cartService = $cartService;
        $this->checkoutController = $checkoutController;
        $this->middleware(['auth:sanctum']);

        // üî• –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú JSON –û–¢–í–ï–¢ –î–õ–Ø –í–°–ï–• API –ú–ï–¢–û–î–û–í
        $this->middleware(function ($request, $next) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Accept –Ω–∞ application/json, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if (!$request->wantsJson()) {
                $request->headers->set('Accept', 'application/json');
            }
            return $next($request);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
     */
    public function getProposalCart(): JsonResponse
    {
        try {
            // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ú–ï–¢–û–î –° –î–û–°–¢–ê–í–ö–û–ô
            $cart = $this->cartService->getProposalCartWithDelivery();

            $progress = $cart->rental_request_id
                ? $this->cartService->getRequestProgress($cart->rental_request_id)
                : null;

            // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return response()->json([
                'success' => true,
                'data' => [
                    'cart' => $cart,
                    'total_rental' => $cart->total_base_amount,
                    'total_delivery' => $cart->items->sum('delivery_cost'),
                    'total_platform_fee' => $cart->total_platform_fee,
                    'grand_total' => $cart->total_base_amount + $cart->items->sum('delivery_cost'),
                    'reserved_until' => $cart->reserved_until,
                    'progress' => $progress
                ]
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 422);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
     */
    public function addToCart(Request $request): JsonResponse
    {
        $request->validate([
            'proposal_id' => 'required|exists:rental_request_responses,id'
        ]);

        try {
            $proposal = RentalRequestResponse::with(['equipment.rentalTerms', 'rentalRequest'])
                ->findOrFail($request->proposal_id);

            // üî• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ú–ï–ù–Ø–ï–ú –°–¢–ê–¢–£–° –ù–ê ACCEPTED –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò –í –ö–û–†–ó–ò–ù–£
            if ($proposal->status !== 'accepted') {
                $proposal->update(['status' => 'accepted']);
            }

            // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É...
            $cartItem = $this->cartService->addProposalItem($proposal->id);

            return response()->json([
                'success' => true,
                'message' => '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É',
                'data' => [
                    'cart_item' => $cartItem->load('proposal.equipment'),
                    'reserved_until' => $cartItem->cart->reserved_until
                ]
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 422);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
     */
    public function removeSelected(Request $request): JsonResponse
    {
        try {
            $request->validate([
                'items' => 'required|array',
                'items.*' => 'exists:cart_items,id'
            ]);

            $deletedCount = 0;
            foreach ($request->items as $itemId) {
                $this->cartService->removeItem($itemId);
                $deletedCount++;
            }

            return response()->json([
                'success' => true,
                'message' => "–£–¥–∞–ª–µ–Ω–æ {$deletedCount} –ø–æ–∑–∏—Ü–∏–π",
                'deleted_count' => $deletedCount
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 422);
        }
    }

    /**
     * üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
     */
    public function removeSelectedItems(Request $request): JsonResponse
    {
        try {
            $request->validate([
                'selected_items' => 'required|array',
                'selected_items.*' => 'exists:cart_items,id'
            ]);

            $deletedCount = 0;
            foreach ($request->selected_items as $itemId) {
                $this->cartService->removeItem($itemId);
                $deletedCount++;
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
            $cart = $this->cartService->getProposalCartWithDelivery();

            return response()->json([
                'success' => true,
                'message' => "–£–¥–∞–ª–µ–Ω–æ {$deletedCount} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
                'deleted_count' => $deletedCount,
                'cart' => $cart,
                'cart_count' => $cart->items->count()
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 422);
        }
    }

    /**
     * üî• –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CheckoutController
     */
    public function checkoutSelected(Request $request): JsonResponse
    {
        try {
            $request->validate([
                'selected_items' => 'required|array',
                'selected_items.*' => 'exists:cart_items,id'
            ]);

            \Log::info('[PROPOSAL_CHECKOUT_API] Starting API checkout with enhanced availability', [
                'user_id' => auth()->id(),
                'selected_items' => $request->selected_items
            ]);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è CheckoutController
            $checkoutRequest = new Request();
            $checkoutRequest->setMethod('POST');
            $checkoutRequest->request->add([
                'selected_items' => json_encode($request->selected_items)
            ]);

            // üî• –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è JSON –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $checkoutRequest->headers->set('Accept', 'application/json');
            $checkoutRequest->setUserResolver(function () {
                return auth()->user();
            });

            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            $response = $this->checkoutController->processProposalCheckout($checkoutRequest);

            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if ($response instanceof JsonResponse) {
                return $response;
            }

            throw new \Exception('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');

        } catch (\Exception $e) {
            \Log::error('[PROPOSAL_CHECKOUT_API] API checkout failed', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' . $e->getMessage()
            ], 422);
        }
    }

    /**
     * –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function extendReservation(): JsonResponse
    {
        try {
            $extended = $this->cartService->extendProposalReservation();

            return response()->json([
                'success' => $extended,
                'message' => $extended
                    ? '–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ 24 —á–∞—Å–∞'
                    : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'reserved_until' => $extended ? $this->cartService->getCart(Cart::TYPE_PROPOSAL)->reserved_until : null
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 422);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞—è–≤–∫–∏
     */
    public function getRequestProgress($requestId): JsonResponse
    {
        try {
            $progress = $this->cartService->getRequestProgress($requestId);

            return response()->json([
                'success' => true,
                'data' => $progress
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 422);
        }
    }

    /**
     * üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –° –ì–ê–†–ê–ù–¢–ò–ï–ô JSON –û–¢–í–ï–¢–ê
     */
   public function updateRentalPeriod(Request $request): JsonResponse
    {
        \Log::info('[PROPOSAL_CART_UPDATE] START - Updating rental period with enhanced availability check', [
            'user_id' => auth()->id(),
            'request_data' => $request->all()
        ]);

        try {
            $input = $request->all();

            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º selected_items –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            if (isset($input['selected_items']) && is_string($input['selected_items'])) {
                $input['selected_items'] = json_decode($input['selected_items'], true);
            }

            $validator = Validator::make($input, [
                'start_date' => 'required|date|after_or_equal:today',
                'end_date' => 'required|date|after:start_date',
                'selected_items' => 'required|array',
                'selected_items.*' => 'exists:cart_items,id'
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'success' => false,
                    'message' => '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' . $validator->errors()->first(),
                    'errors' => $validator->errors()
                ], 422);
            }

            $selectedItems = $input['selected_items'];
            $startDate = $input['start_date'];
            $endDate = $input['end_date'];

            $cart = $this->cartService->getCart(Cart::TYPE_PROPOSAL);

            DB::beginTransaction();

            try {
                $updatedItems = [];
                $availabilityService = app(EquipmentAvailabilityService::class);

                foreach ($selectedItems as $itemId) {
                    $cartItem = CartItem::with(['proposal.rentalRequest', 'rentalCondition', 'proposal.equipment'])
                        ->where('id', $itemId)
                        ->where('cart_id', $cart->id)
                        ->first();

                    if (!$cartItem) {
                        \Log::warning('[PROPOSAL_CART_UPDATE] Cart item not found', ['item_id' => $itemId]);
                        continue;
                    }

                    // üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –° –£–ß–ï–¢–û–ú –¢–ï–ö–£–©–ï–ì–û –†–ï–ó–ï–†–í–ê
                    $isAvailable = $availabilityService->isAvailableForCart(
                        $cartItem->proposal->equipment,
                        $startDate,
                        $endDate,
                        $cart->reservation_token // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–∑–∏–Ω—ã
                    );

                    if (!$isAvailable) {
                        // üî• –£–õ–£–ß–®–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï
                        $nextAvailable = $availabilityService->calculateNextAvailableDate($cartItem->proposal->equipment->id);
                        $errorMsg = $nextAvailable
                            ? "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ '{$cartItem->proposal->equipment->title}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã. –ë–ª–∏–∂–∞–π—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞: " . $nextAvailable->format('d.m.Y')
                            : "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ '{$cartItem->proposal->equipment->title}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã.";

                        throw new \Exception($errorMsg);
                    }

                    // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ò–ï
                    $this->updateEquipmentReservation($cartItem, $startDate, $endDate, $cart);

                    // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...
                    $start = Carbon::parse($startDate);
                    $end = Carbon::parse($endDate);
                    $days = $start->diffInDays($end) + 1;

                    $shiftHours = $cartItem->rentalCondition->shift_hours ?? 8;
                    $shiftsPerDay = $cartItem->rentalCondition->shifts_per_day ?? 1;
                    $workingHours = $days * $shiftHours * $shiftsPerDay;

                    $customerPricePerHour = $cartItem->fixed_customer_price;
                    $lessorPricePerHour = $cartItem->fixed_lessor_price;
                    $platformFeePerHour = $cartItem->platform_fee;

                    $updateData = [
                        'start_date' => $startDate,
                        'end_date' => $endDate,
                        'period_count' => $workingHours,
                        'base_price' => $customerPricePerHour,
                        'fixed_customer_price' => $customerPricePerHour,
                        'fixed_lessor_price' => $lessorPricePerHour,
                        'platform_fee' => $platformFeePerHour,
                    ];

                    $cartItem->update($updateData);
                    $cartItem->refresh();

                    $updatedItems[] = $cartItem;
                }

                DB::commit();

                // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ò–ï –ö–û–†–ó–ò–ù–´
                $cart->update([
                    'reserved_until' => now()->addHours(24),
                ]);

                $this->cartService->recalculateTotals($cart);
                $updatedCart = $this->cartService->getProposalCartWithDelivery();

                return response()->json([
                    'success' => true,
                    'message' => '–î–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                    'data' => [
                        'cart' => $updatedCart,
                        'reserved_until' => $cart->reserved_until,
                        'updated_items_count' => count($updatedItems)
                    ]
                ]);

            } catch (Exception $e) {
                DB::rollBack();
                throw $e;
            }

        } catch (Exception $e) {
            \Log::error('[PROPOSAL_CART_UPDATE] Update failed', ['error' => $e->getMessage()]);
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 422);
        }
    }

    private function updateEquipmentReservation(CartItem $cartItem, string $startDate, string $endDate, Cart $cart): void
    {
        $availabilityService = app(EquipmentAvailabilityService::class);

        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
        $availabilityService->releaseEquipmentReservation(
            $cartItem->proposal->equipment,
            $cartItem->start_date,
            $cartItem->end_date,
            $cart->reservation_token
        );

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
        $availabilityService->bookEquipment(
            $cartItem->proposal->equipment,
            $startDate,
            $endDate,
            null,
            EquipmentAvailabilityService::STATUS_TEMP_RESERVE,
            $cart->reservation_token
        );
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
     */
    public function removeItem($itemId): JsonResponse
    {
        try {
            $this->cartService->removeItem($itemId);

            return response()->json([
                'success' => true,
                'message' => '–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 422);
        }
    }

    //—Ç–µ—Å—Ç, —É–¥–∞–ª–∏—Ç—å
    public function testApi(Request $request): JsonResponse
    {
        \Log::info('[API_TEST] Test endpoint called', [
            'user_id' => auth()->id(),
            'request_data' => $request->all()
        ]);

        return response()->json([
            'success' => true,
            'message' => 'API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
            'data' => [
                'user_id' => auth()->id(),
                'timestamp' => now()->toDateTimeString(),
                'test_array' => [1, 2, 3],
                'request_data' => $request->all()
            ]
        ]);
    }
}
